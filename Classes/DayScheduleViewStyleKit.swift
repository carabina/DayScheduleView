//
//  DayScheduleViewStyleKit.swift
//  DayScheduleView
//
//  Created by Naked Software, LLC on 8/8/18.
//  Copyright Â© 2018 Naked Software, LLC. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class DayScheduleViewStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let backgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var backgroundColor: UIColor { return Cache.backgroundColor }

    //// Drawing Methods

    @objc dynamic public class func drawTimeView(frame: CGRect = CGRect(x: 0, y: 0, width: 384, height: 1989)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Background Drawing
        let backgroundPath = UIBezierPath(rect: CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height))
        UIColor.white.setFill()
        backgroundPath.fill()


        //// 12 AM Start Drawing
        let _12AMStartRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _12AMStartRect)
        context.translateBy(x: _12AMStartRect.minX, y: _12AMStartRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _12AMStartRect.width, height: _12AMStartRect.height), time: "12 AM")
        context.restoreGState()


        //// 1 AM Drawing
        let _1AMRect = CGRect(x: frame.minX, y: frame.minY + 82, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _1AMRect)
        context.translateBy(x: _1AMRect.minX, y: _1AMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _1AMRect.width, height: _1AMRect.height), time: "1 AM")
        context.restoreGState()


        //// 2 AM Drawing
        let _2AMRect = CGRect(x: frame.minX, y: frame.minY + 164, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _2AMRect)
        context.translateBy(x: _2AMRect.minX, y: _2AMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _2AMRect.width, height: _2AMRect.height), time: "2 AM")
        context.restoreGState()


        //// 3 AM Drawing
        let _3AMRect = CGRect(x: frame.minX, y: frame.minY + 246, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _3AMRect)
        context.translateBy(x: _3AMRect.minX, y: _3AMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _3AMRect.width, height: _3AMRect.height), time: "3 AM")
        context.restoreGState()


        //// 4 AM Drawing
        let _4AMRect = CGRect(x: frame.minX, y: frame.minY + 328, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _4AMRect)
        context.translateBy(x: _4AMRect.minX, y: _4AMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _4AMRect.width, height: _4AMRect.height), time: "4 AM")
        context.restoreGState()


        //// 5 AM Drawing
        let _5AMRect = CGRect(x: frame.minX, y: frame.minY + 410, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _5AMRect)
        context.translateBy(x: _5AMRect.minX, y: _5AMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _5AMRect.width, height: _5AMRect.height), time: "5 AM")
        context.restoreGState()


        //// 6 AM Drawing
        let _6AMRect = CGRect(x: frame.minX, y: frame.minY + 492, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _6AMRect)
        context.translateBy(x: _6AMRect.minX, y: _6AMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _6AMRect.width, height: _6AMRect.height), time: "6 AM")
        context.restoreGState()


        //// 7 AM Drawing
        let _7AMRect = CGRect(x: frame.minX, y: frame.minY + 574, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _7AMRect)
        context.translateBy(x: _7AMRect.minX, y: _7AMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _7AMRect.width, height: _7AMRect.height), time: "7 AM")
        context.restoreGState()


        //// 8 AM Drawing
        let _8AMRect = CGRect(x: frame.minX, y: frame.minY + 656, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _8AMRect)
        context.translateBy(x: _8AMRect.minX, y: _8AMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _8AMRect.width, height: _8AMRect.height), time: "8 AM")
        context.restoreGState()


        //// 9 AM Drawing
        let _9AMRect = CGRect(x: frame.minX, y: frame.minY + 738, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _9AMRect)
        context.translateBy(x: _9AMRect.minX, y: _9AMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _9AMRect.width, height: _9AMRect.height), time: "9 AM")
        context.restoreGState()


        //// 10 AM Drawing
        let _10AMRect = CGRect(x: frame.minX, y: frame.minY + 820, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _10AMRect)
        context.translateBy(x: _10AMRect.minX, y: _10AMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _10AMRect.width, height: _10AMRect.height), time: "10 AM")
        context.restoreGState()


        //// 11 AM Drawing
        let _11AMRect = CGRect(x: frame.minX, y: frame.minY + 902, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _11AMRect)
        context.translateBy(x: _11AMRect.minX, y: _11AMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _11AMRect.width, height: _11AMRect.height), time: "11 AM")
        context.restoreGState()


        //// Noon Drawing
        let noonRect = CGRect(x: frame.minX, y: frame.minY + 984, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: noonRect)
        context.translateBy(x: noonRect.minX, y: noonRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: noonRect.width, height: noonRect.height), time: "Noon")
        context.restoreGState()


        //// 1 PM Drawing
        let _1PMRect = CGRect(x: frame.minX, y: frame.minY + 1066, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _1PMRect)
        context.translateBy(x: _1PMRect.minX, y: _1PMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _1PMRect.width, height: _1PMRect.height), time: "1 PM")
        context.restoreGState()


        //// 2 PM Drawing
        let _2PMRect = CGRect(x: frame.minX, y: frame.minY + 1148, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _2PMRect)
        context.translateBy(x: _2PMRect.minX, y: _2PMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _2PMRect.width, height: _2PMRect.height), time: "2 PM")
        context.restoreGState()


        //// 3 PM Drawing
        let _3PMRect = CGRect(x: frame.minX, y: frame.minY + 1230, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _3PMRect)
        context.translateBy(x: _3PMRect.minX, y: _3PMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _3PMRect.width, height: _3PMRect.height), time: "3 PM")
        context.restoreGState()


        //// 4 PM Drawing
        let _4PMRect = CGRect(x: frame.minX, y: frame.minY + 1312, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _4PMRect)
        context.translateBy(x: _4PMRect.minX, y: _4PMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _4PMRect.width, height: _4PMRect.height), time: "4 PM")
        context.restoreGState()


        //// 5 PM Drawing
        let _5PMRect = CGRect(x: frame.minX, y: frame.minY + 1394, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _5PMRect)
        context.translateBy(x: _5PMRect.minX, y: _5PMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _5PMRect.width, height: _5PMRect.height), time: "5 PM")
        context.restoreGState()


        //// 6 PM Drawing
        let _6PMRect = CGRect(x: frame.minX, y: frame.minY + 1476, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _6PMRect)
        context.translateBy(x: _6PMRect.minX, y: _6PMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _6PMRect.width, height: _6PMRect.height), time: "6 PM")
        context.restoreGState()


        //// 7 PM Drawing
        let _7PMRect = CGRect(x: frame.minX, y: frame.minY + 1558, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _7PMRect)
        context.translateBy(x: _7PMRect.minX, y: _7PMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _7PMRect.width, height: _7PMRect.height), time: "7 PM")
        context.restoreGState()


        //// 8 PM Drawing
        let _8PMRect = CGRect(x: frame.minX, y: frame.minY + 1640, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _8PMRect)
        context.translateBy(x: _8PMRect.minX, y: _8PMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _8PMRect.width, height: _8PMRect.height), time: "8 PM")
        context.restoreGState()


        //// 9 PM Drawing
        let _9PMRect = CGRect(x: frame.minX, y: frame.minY + 1722, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _9PMRect)
        context.translateBy(x: _9PMRect.minX, y: _9PMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _9PMRect.width, height: _9PMRect.height), time: "9 PM")
        context.restoreGState()


        //// 10 PM Drawing
        let _10PMRect = CGRect(x: frame.minX, y: frame.minY + 1804, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _10PMRect)
        context.translateBy(x: _10PMRect.minX, y: _10PMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _10PMRect.width, height: _10PMRect.height), time: "10 PM")
        context.restoreGState()


        //// 11 PM Drawing
        let _11PMRect = CGRect(x: frame.minX, y: frame.minY + 1886, width: frame.width, height: 82)
        context.saveGState()
        context.clip(to: _11PMRect)
        context.translateBy(x: _11PMRect.minX, y: _11PMRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: _11PMRect.width, height: _11PMRect.height), time: "11 PM")
        context.restoreGState()


        //// 12 AM End Drawing
        let _12AMEndRect = CGRect(x: frame.minX, y: frame.minY + 1968, width: frame.width, height: 21)
        context.saveGState()
        context.clip(to: _12AMEndRect)
        context.translateBy(x: _12AMEndRect.minX, y: _12AMEndRect.minY)

        DayScheduleViewStyleKit.drawHourLine(frame: CGRect(x: 0, y: 0, width: _12AMEndRect.width, height: _12AMEndRect.height), time: "12 AM")
        context.restoreGState()
    }

    @objc dynamic public class func drawHourLine(frame: CGRect = CGRect(x: 0, y: 0, width: 384, height: 21), time: String = "12 AM") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let lineColor = UIColor(red: 0.667, green: 0.667, blue: 0.667, alpha: 1.000)

        //// Text Drawing
        let textRect = CGRect(x: frame.minX, y: frame.minY, width: 50, height: 21)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .right
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: lineColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = time.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        time.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX + 58, y: frame.minY + 10, width: frame.width - 58, height: 1))
        lineColor.setFill()
        rectanglePath.fill()
    }

    @objc dynamic public class func drawHour(frame: CGRect = CGRect(x: 0, y: 0, width: 384, height: 82), time: String = "12 AM") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let lineColor = UIColor(red: 0.667, green: 0.667, blue: 0.667, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: 21)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        DayScheduleViewStyleKit.drawHourLine(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), time: time)
        context.restoreGState()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX + 58, y: frame.minY + 51, width: frame.width - 58, height: 1))
        lineColor.setFill()
        rectanglePath.fill()
    }

    @objc dynamic public class func drawCurrentTime(frame: CGRect = CGRect(x: 0, y: 0, width: 384, height: 21), now: String = "10:20 AM") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let currentTimeColor = UIColor(red: 0.991, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Text Drawing
        let textRect = CGRect(x: frame.minX, y: frame.minY, width: 50, height: 21)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .right
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 10),
            .foregroundColor: currentTimeColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = now.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        now.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX + 52, y: frame.minY + 10, width: frame.width - 52, height: 1))
        currentTimeColor.setFill()
        rectanglePath.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + fastFloor((frame.width - 319) * 0.92308 + 0.5), y: frame.minY + 8, width: frame.width - 319 - fastFloor((frame.width - 319) * 0.92308 + 0.5), height: 5))
        currentTimeColor.setFill()
        ovalPath.fill()
    }

}
