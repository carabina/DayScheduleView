//
//  DayScheduleViewStyleKit.swift
//  DayScheduleView
//
//  Created by Naked Software, LLC on 8/6/18.
//  Copyright Â© 2018 Naked Software, LLC. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class DayScheduleViewStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let backgroundColor: UIColor = UIColor(red: 0.929, green: 0.929, blue: 0.929, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var backgroundColor: UIColor { return Cache.backgroundColor }

    //// Drawing Methods

    @objc dynamic public class func drawTimeView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 384, height: 1920), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 384, height: 1920), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 384, y: resizedFrame.height / 1920)


        //// Background Drawing
        let backgroundPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 384, height: 1920))
        DayScheduleViewStyleKit.backgroundColor.setFill()
        backgroundPath.fill()


        //// 1 AM Drawing
        let _1AMRect = CGRect(x: 0, y: 70, width: 45, height: 20)
        context.saveGState()
        context.clip(to: _1AMRect)
        context.translateBy(x: _1AMRect.minX, y: _1AMRect.minY)

        DayScheduleViewStyleKit.drawTime(frame: CGRect(origin: .zero, size: _1AMRect.size), resizing: .stretch, text: "1 AM")
        context.restoreGState()


        //// 2 AM Drawing
        let _2AMRect = CGRect(x: 0, y: 150, width: 45, height: 20)
        context.saveGState()
        context.clip(to: _2AMRect)
        context.translateBy(x: _2AMRect.minX, y: _2AMRect.minY)

        DayScheduleViewStyleKit.drawTime(frame: CGRect(origin: .zero, size: _2AMRect.size), resizing: .stretch, text: "2 AM")
        context.restoreGState()


        //// 3 AM Drawing
        let _3AMRect = CGRect(x: 0, y: 230, width: 45, height: 20)
        context.saveGState()
        context.clip(to: _3AMRect)
        context.translateBy(x: _3AMRect.minX, y: _3AMRect.minY)

        DayScheduleViewStyleKit.drawTime(frame: CGRect(origin: .zero, size: _3AMRect.size), resizing: .stretch, text: "3 AM")
        context.restoreGState()


        //// 4 AM Drawing
        let _4AMRect = CGRect(x: 0, y: 310, width: 45, height: 20)
        context.saveGState()
        context.clip(to: _4AMRect)
        context.translateBy(x: _4AMRect.minX, y: _4AMRect.minY)

        DayScheduleViewStyleKit.drawTime(frame: CGRect(origin: .zero, size: _4AMRect.size), resizing: .stretch, text: "4 AM")
        context.restoreGState()


        //// 5 AM Drawing
        let _5AMRect = CGRect(x: 0, y: 390, width: 45, height: 20)
        context.saveGState()
        context.clip(to: _5AMRect)
        context.translateBy(x: _5AMRect.minX, y: _5AMRect.minY)

        DayScheduleViewStyleKit.drawTime(frame: CGRect(origin: .zero, size: _5AMRect.size), resizing: .stretch, text: "5 AM")
        context.restoreGState()


        //// 6 AM Drawing
        let _6AMRect = CGRect(x: 0, y: 470, width: 45, height: 20)
        context.saveGState()
        context.clip(to: _6AMRect)
        context.translateBy(x: _6AMRect.minX, y: _6AMRect.minY)

        DayScheduleViewStyleKit.drawTime(frame: CGRect(origin: .zero, size: _6AMRect.size), resizing: .stretch, text: "6 AM")
        context.restoreGState()


        //// 7 AM Drawing
        let _7AMRect = CGRect(x: 0, y: 550, width: 45, height: 20)
        context.saveGState()
        context.clip(to: _7AMRect)
        context.translateBy(x: _7AMRect.minX, y: _7AMRect.minY)

        DayScheduleViewStyleKit.drawTime(frame: CGRect(origin: .zero, size: _7AMRect.size), resizing: .stretch, text: "7 AM")
        context.restoreGState()


        //// 8 AM Drawing
        let _8AMRect = CGRect(x: 0, y: 630, width: 45, height: 20)
        context.saveGState()
        context.clip(to: _8AMRect)
        context.translateBy(x: _8AMRect.minX, y: _8AMRect.minY)

        DayScheduleViewStyleKit.drawTime(frame: CGRect(origin: .zero, size: _8AMRect.size), resizing: .stretch, text: "8 AM")
        context.restoreGState()


        //// 12 AM Block Drawing
        let _12AMBlockRect = CGRect(x: 50, y: 0, width: 334, height: 40)
        context.saveGState()
        context.clip(to: _12AMBlockRect)
        context.translateBy(x: _12AMBlockRect.minX, y: _12AMBlockRect.minY)

        DayScheduleViewStyleKit.drawTimeBlock(frame: CGRect(origin: .zero, size: _12AMBlockRect.size), resizing: .stretch, startHour: 9, endHour: 17, hour: 0)
        context.restoreGState()


        //// 12:30 AM Block Drawing
        let _1230AMBlockRect = CGRect(x: 50, y: 40, width: 334, height: 40)
        context.saveGState()
        context.clip(to: _1230AMBlockRect)
        context.translateBy(x: _1230AMBlockRect.minX, y: _1230AMBlockRect.minY)

        DayScheduleViewStyleKit.drawTimeBlock(frame: CGRect(origin: .zero, size: _1230AMBlockRect.size), resizing: .stretch, startHour: 9, endHour: 17, hour: 0.5)
        context.restoreGState()


        //// 1 AM Block Drawing
        let _1AMBlockRect = CGRect(x: 50, y: 80, width: 334, height: 40)
        context.saveGState()
        context.clip(to: _1AMBlockRect)
        context.translateBy(x: _1AMBlockRect.minX, y: _1AMBlockRect.minY)

        DayScheduleViewStyleKit.drawTimeBlock(frame: CGRect(origin: .zero, size: _1AMBlockRect.size), resizing: .stretch, startHour: 9, endHour: 17, hour: 1)
        context.restoreGState()


        //// 1:30 AM Block Drawing
        let _130AMBlockRect = CGRect(x: 50, y: 120, width: 334, height: 40)
        context.saveGState()
        context.clip(to: _130AMBlockRect)
        context.translateBy(x: _130AMBlockRect.minX, y: _130AMBlockRect.minY)

        DayScheduleViewStyleKit.drawTimeBlock(frame: CGRect(origin: .zero, size: _130AMBlockRect.size), resizing: .stretch, startHour: 9, endHour: 17, hour: 1.5)
        context.restoreGState()


        //// 2 AM Block Drawing
        let _2AMBlockRect = CGRect(x: 50, y: 160, width: 334, height: 40)
        context.saveGState()
        context.clip(to: _2AMBlockRect)
        context.translateBy(x: _2AMBlockRect.minX, y: _2AMBlockRect.minY)

        DayScheduleViewStyleKit.drawTimeBlock(frame: CGRect(origin: .zero, size: _2AMBlockRect.size), resizing: .stretch, startHour: 9, endHour: 17, hour: 2)
        context.restoreGState()


        //// 2:30 AM Block Drawing
        let _230AMBlockRect = CGRect(x: 50, y: 200, width: 334, height: 40)
        context.saveGState()
        context.clip(to: _230AMBlockRect)
        context.translateBy(x: _230AMBlockRect.minX, y: _230AMBlockRect.minY)

        DayScheduleViewStyleKit.drawTimeBlock(frame: CGRect(origin: .zero, size: _230AMBlockRect.size), resizing: .stretch, startHour: 9, endHour: 17, hour: 2.5)
        context.restoreGState()


        //// 3 AM Block Drawing
        let _3AMBlockRect = CGRect(x: 50, y: 240, width: 334, height: 40)
        context.saveGState()
        context.clip(to: _3AMBlockRect)
        context.translateBy(x: _3AMBlockRect.minX, y: _3AMBlockRect.minY)

        DayScheduleViewStyleKit.drawTimeBlock(frame: CGRect(origin: .zero, size: _3AMBlockRect.size), resizing: .stretch, startHour: 9, endHour: 17, hour: 3)
        context.restoreGState()


        //// 3:30 AM Block Drawing
        let _330AMBlockRect = CGRect(x: 50, y: 280, width: 334, height: 40)
        context.saveGState()
        context.clip(to: _330AMBlockRect)
        context.translateBy(x: _330AMBlockRect.minX, y: _330AMBlockRect.minY)

        DayScheduleViewStyleKit.drawTimeBlock(frame: CGRect(origin: .zero, size: _330AMBlockRect.size), resizing: .stretch, startHour: 9, endHour: 17, hour: 3.5)
        context.restoreGState()


        //// 4 AM Block Drawing
        let _4AMBlockRect = CGRect(x: 50, y: 320, width: 334, height: 40)
        context.saveGState()
        context.clip(to: _4AMBlockRect)
        context.translateBy(x: _4AMBlockRect.minX, y: _4AMBlockRect.minY)

        DayScheduleViewStyleKit.drawTimeBlock(frame: CGRect(origin: .zero, size: _4AMBlockRect.size), resizing: .stretch, startHour: 9, endHour: 17, hour: 4)
        context.restoreGState()


        //// 4:30 AM Block Drawing
        let _430AMBlockRect = CGRect(x: 50, y: 360, width: 334, height: 40)
        context.saveGState()
        context.clip(to: _430AMBlockRect)
        context.translateBy(x: _430AMBlockRect.minX, y: _430AMBlockRect.minY)

        DayScheduleViewStyleKit.drawTimeBlock(frame: CGRect(origin: .zero, size: _430AMBlockRect.size), resizing: .stretch, startHour: 9, endHour: 17, hour: 4.5)
        context.restoreGState()


        //// 5 AM Block Drawing
        let _5AMBlockRect = CGRect(x: 50, y: 400, width: 334, height: 40)
        context.saveGState()
        context.clip(to: _5AMBlockRect)
        context.translateBy(x: _5AMBlockRect.minX, y: _5AMBlockRect.minY)

        DayScheduleViewStyleKit.drawTimeBlock(frame: CGRect(origin: .zero, size: _5AMBlockRect.size), resizing: .stretch, startHour: 9, endHour: 17, hour: 5)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTimeBlock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 334, height: 40), resizing: ResizingBehavior = .aspectFit, startHour: CGFloat = 9, endHour: CGFloat = 17, hour: CGFloat = 9) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 334, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 334, y: resizedFrame.height / 40)


        //// Color Declarations
        let offHourColor = UIColor(red: 0.843, green: 0.843, blue: 0.843, alpha: 1.000)
        let onHourColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let hourBackgroundColor = startHour <= hour && hour < endHour ? onHourColor : offHourColor
        let hourBorderColor = startHour <= hour && hour < endHour ? offHourColor : onHourColor

        //// 12 AM Zone Drawing
        let _12AMZonePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 334, height: 40))
        hourBackgroundColor.setFill()
        _12AMZonePath.fill()
        hourBorderColor.setStroke()
        _12AMZonePath.lineWidth = 1
        _12AMZonePath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTime(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 45, height: 20), resizing: ResizingBehavior = .aspectFit, text: String = "1 AM") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 45, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 45, y: resizedFrame.height / 20)


        //// 1 AM Drawing
        let _1AMRect = CGRect(x: 0, y: 0, width: 45, height: 20)
        let _1AMStyle = NSMutableParagraphStyle()
        _1AMStyle.alignment = .right
        let _1AMFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.systemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: _1AMStyle,
        ] as [NSAttributedStringKey: Any]

        let _1AMTextHeight: CGFloat = text.boundingRect(with: CGSize(width: _1AMRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _1AMFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _1AMRect)
        text.draw(in: CGRect(x: _1AMRect.minX, y: _1AMRect.minY + (_1AMRect.height - _1AMTextHeight) / 2, width: _1AMRect.width, height: _1AMTextHeight), withAttributes: _1AMFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(DayScheduleViewStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
